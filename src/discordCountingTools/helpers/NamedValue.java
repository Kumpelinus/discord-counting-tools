package discordCountingTools.helpers;

import java.util.HashMap;
import java.util.Random;

public class NamedValue {
	private String name;
	private double value;
	private HashMap<String, NamedValue> variants;

	/*
	 * Symbols are described in the following order:
	 * TEXT - REGULAR - MATHEMATICAL - SUBSCRIPT - SUPERSCRIPT
	 * ROMAN - ITALIC
	 * LIGHT - BOLD - DOUBLE
	 * UPPERCASE - LOWERCASE - MIXEDCASE
	 * SANS - SERIF
	 * 
	 * For symbols that consist of only regular ASCII characters,
	 * only TEXT and the case are given.
	 * 
	 * Symbols are assumed to be REGULAR, if Unicode does not
	 * call them MATHEMATICAL.
	 * 
	 * DOUBLE refers to letters written double-struck, also
	 * called "blackboard bold".
	 * 
	 * MIXEDCASE refers to Unicode characters described as "symbols".
	 */
	
	public static NamedValue PI = new NamedValue("pi", Math.PI, new HashMap<String, NamedValue>() {{
		put("TEXT UPPERCASE",                            new NamedValue("PI", Math.PI));
		put("TEXT LOWERCASE",                            new NamedValue("pi", Math.PI));
		put("TEXT MIXEDCASE",                            new NamedValue("Pi", Math.PI));
		put("REGULAR ROMAN LIGHT UPPERCASE SERIF",       new NamedValue("Œ†", Math.PI));
		put("REGULAR ROMAN LIGHT LOWERCASE SERIF",       new NamedValue("œÄ", Math.PI));
		put("REGULAR ROMAN LIGHT MIXEDCASE SERIF",       new NamedValue("œñ", Math.PI));
		put("MATHEMATICAL ROMAN BOLD UPPERCASE SERIF",   new NamedValue("ùö∑", Math.PI));
		put("MATHEMATICAL ROMAN BOLD LOWERCASE SERIF",   new NamedValue("ùõë", Math.PI));
		put("MATHEMATICAL ROMAN BOLD MIXEDCASE SERIF",   new NamedValue("ùõ°", Math.PI));
		put("MATHEMATICAL ITALIC LIGHT UPPERCASE SERIF", new NamedValue("ùõ±", Math.PI));
		put("MATHEMATICAL ITALIC LIGHT LOWERCASE SERIF", new NamedValue("ùúã", Math.PI));
		put("MATHEMATICAL ITALIC LIGHT MIXEDCASE SERIF", new NamedValue("ùúõ", Math.PI));
		put("MATHEMATICAL ITALIC BOLD UPPERCASE SERIF",  new NamedValue("ùú´", Math.PI));
		put("MATHEMATICAL ITALIC BOLD LOWERCASE SERIF",  new NamedValue("ùùÖ", Math.PI));
		put("MATHEMATICAL ITALIC BOLD MIXEDCASE SERIF",  new NamedValue("ùùï", Math.PI));
		put("MATHEMATICAL ROMAN DOUBLE UPPERCASE SANS",  new NamedValue("‚Ñø", Math.PI));
		put("MATHEMATICAL ROMAN DOUBLE LOWERCASE SANS",  new NamedValue("‚Ñº", Math.PI));
		put("MATHEMATICAL ROMAN BOLD UPPERCASE SANS",    new NamedValue("ùù•", Math.PI));
		put("MATHEMATICAL ROMAN BOLD LOWERCASE SANS",    new NamedValue("ùùø", Math.PI));
		put("MATHEMATICAL ROMAN BOLD MIXEDCASE SANS",    new NamedValue("ùûè", Math.PI));
		put("MATHEMATICAL ITALIC BOLD UPPERCASE SANS",   new NamedValue("ùûü", Math.PI));
		put("MATHEMATICAL ITALIC BOLD LOWERCASE SANS",   new NamedValue("ùûπ", Math.PI));
		put("MATHEMATICAL ITALIC BOLD MIXEDCASE SANS",   new NamedValue("ùüâ", Math.PI));
		}});
	
	public static NamedValue TAU = new NamedValue("tau", Math.TAU, new HashMap<String, NamedValue>() {{
		put("TEXT UPPERCASE",                            new NamedValue("TAU", Math.TAU));
		put("TEXT LOWERCASE",                            new NamedValue("tau", Math.TAU));
		put("TEXT MIXEDCASE",                            new NamedValue("Tau", Math.TAU));
		put("REGULAR ROMAN LIGHT UPPERCASE SERIF",       new NamedValue("Œ§", Math.TAU));
		put("REGULAR ROMAN LIGHT LOWERCASE SERIF",       new NamedValue("œÑ", Math.TAU));
		put("MATHEMATICAL ROMAN BOLD UPPERCASE SERIF",   new NamedValue("ùöª", Math.TAU));
		put("MATHEMATICAL ROMAN BOLD LOWERCASE SERIF",   new NamedValue("ùõï", Math.TAU));
		put("MATHEMATICAL ITALIC LIGHT UPPERCASE SERIF", new NamedValue("ùõµ", Math.TAU));
		put("MATHEMATICAL ITALIC LIGHT LOWERCASE SERIF", new NamedValue("ùúè", Math.TAU));
		put("MATHEMATICAL ITALIC BOLD UPPERCASE SERIF",  new NamedValue("ùúØ", Math.TAU));
		put("MATHEMATICAL ITALIC BOLD LOWERCASE SERIF",  new NamedValue("ùùâ", Math.TAU));
		put("MATHEMATICAL ROMAN BOLD UPPERCASE SANS",    new NamedValue("ùù©", Math.TAU));
		put("MATHEMATICAL ROMAN BOLD LOWERCASE SANS",    new NamedValue("ùûÉ", Math.TAU));
		put("MATHEMATICAL ITALIC BOLD UPPERCASE SANS",   new NamedValue("ùû£", Math.TAU));
		put("MATHEMATICAL ITALIC BOLD LOWERCASE SANS",   new NamedValue("ùûΩ", Math.TAU));	
	}});
	
	public static NamedValue GAMMA = new NamedValue("Œ≥", 0.577215664901532, new HashMap<String, NamedValue>() {{
		put("REGULAR ROMAN LIGHT UPPERCASE SERIF",       new NamedValue("Œì", 0.577215664901532));
		put("REGULAR ROMAN LIGHT LOWERCASE SERIF",       new NamedValue("Œ≥", 0.577215664901532));
		put("MATHEMATICAL ROMAN BOLD UPPERCASE SERIF",   new NamedValue("ùö™", 0.577215664901532));
		put("MATHEMATICAL ROMAN BOLD LOWERCASE SERIF",   new NamedValue("ùõÑ", 0.577215664901532));
		put("MATHEMATICAL ITALIC LIGHT UPPERCASE SERIF", new NamedValue("ùõ§", 0.577215664901532));
		put("MATHEMATICAL ITALIC LIGHT LOWERCASE SERIF", new NamedValue("ùõæ", 0.577215664901532));
		put("MATHEMATICAL ITALIC BOLD UPPERCASE SERIF",  new NamedValue("ùúû", 0.577215664901532));
		put("MATHEMATICAL ITALIC BOLD LOWERCASE SERIF",  new NamedValue("ùú∏", 0.577215664901532));
		put("REGULAR ROMAN DOUBLE UPPERCASE SANS",       new NamedValue("‚Ñæ", 0.577215664901532));
		put("REGULAR ROMAN DOUBLE LOWERCASE SANS",       new NamedValue("‚ÑΩ", 0.577215664901532));
		put("MATHEMATICAL ROMAN BOLD UPPERCASE SANS",    new NamedValue("ùùò", 0.577215664901532));
		put("MATHEMATICAL ROMAN BOLD LOWERCASE SANS",    new NamedValue("ùù≤", 0.577215664901532));
		put("MATHEMATICAL ITALIC BOLD LOWERCASE SANS",   new NamedValue("ùûí", 0.577215664901532));
		put("MATHEMATICAL ITALIC BOLD LOWERCASE SANS",   new NamedValue("ùû¨", 0.577215664901532));
		put("SUBSCRIPT ROMAN LIGHT LOWERCASE SANS",      new NamedValue("·µß", 0.577215664901532));
	}});
		
	public static NamedValue PHI = new NamedValue("phi", 1.618033988749895, new HashMap<String, NamedValue>() {{
		put("TEXT UPPERCASE",                            new NamedValue("PHI", 1.618033988749895));
		put("TEXT LOWERCASE",                            new NamedValue("phi", 1.618033988749895));
		put("TEXT MIXEDCASE",                            new NamedValue("Phi", 1.618033988749895));
		put("REGULAR ROMAN LIGHT UPPERCASE SERIF",       new NamedValue("Œ¶", 1.618033988749895));
		put("REGULAR ROMAN LIGHT LOWERCASE SERIF",       new NamedValue("œÜ", 1.618033988749895)); // these two characters are not identical,
		put("REGULAR ROMAN LIGHT MIXEDCASE SERIF",       new NamedValue("œï", 1.618033988749895)); // despite many fonts showing them as such
		put("MATHEMATICAL ROMAN BOLD UPPERCASE SERIF",   new NamedValue("ùöΩ", 1.618033988749895));
		put("MATHEMATICAL ROMAN BOLD LOWERCASE SERIF",   new NamedValue("ùõó", 1.618033988749895));
		put("MATHEMATICAL ROMAN BOLD MIXEDCASE SERIF",   new NamedValue("ùõü", 1.618033988749895));
		put("MATHEMATICAL ITALIC LIGHT UPPERCASE SERIF", new NamedValue("ùõ∑", 1.618033988749895));
		put("MATHEMATICAL ITALIC LIGHT LOWERCASE SERIF", new NamedValue("ùúë", 1.618033988749895));
		put("MATHEMATICAL ITALIC LIGHT MIXEDCASE SERIF", new NamedValue("ùúô", 1.618033988749895));
		put("MATHEMATICAL ITALIC BOLD UPPERCASE SERIF",  new NamedValue("ùú±", 1.618033988749895));
		put("MATHEMATICAL ITALIC BOLD LOWERCASE SERIF",  new NamedValue("ùùã", 1.618033988749895));
		put("MATHEMATICAL ITALIC BOLD MIXEDCASE SERIF",  new NamedValue("ùùì", 1.618033988749895));
		put("MATHEMATICAL ROMAN BOLD UPPERCASE SANS",    new NamedValue("ùù´", 1.618033988749895));
		put("MATHEMATICAL ROMAN BOLD LOWERCASE SANS",    new NamedValue("ùûÖ", 1.618033988749895));
		put("MATHEMATICAL ROMAN BOLD MIXEDCASE SANS",    new NamedValue("ùûç", 1.618033988749895));
		put("MATHEMATICAL ITALIC BOLD UPPERCASE SANS",   new NamedValue("ùû•", 1.618033988749895));
		put("MATHEMATICAL ITALIC BOLD LOWERCASE SANS",   new NamedValue("ùûø", 1.618033988749895));
		put("MATHEMATICAL ITALIC BOLD MIXEDCASE SANS",   new NamedValue("ùüá", 1.618033988749895));
	}});
		
	public static NamedValue E = new NamedValue("e", Math.E, new HashMap<String, NamedValue>() {{
		put("TEXT UPPCASE", new NamedValue("E", Math.E));
		put("TEXT LOWERCASE", new NamedValue("e", Math.E));
		put("SUBSCRIPT ROMAN LIGHT LOWERCASE SANS", new NamedValue("‚Çë", Math.E));
	}});

	public NamedValue(String name, double value) {
		this.name = name;
		this.value = value;
	}
	
	public NamedValue(String name, double value, HashMap<String, NamedValue> variants) {
		this(name, value);
		this.variants = variants;
	}

	public NamedValue getVariant(String key) {
		return variants.get(key);
	}
	
	public NamedValue getRandom() {
		String[] keyArray = variants.keySet().toArray(String[]::new);
		return variants.get(keyArray[new Random().nextInt(keyArray.length)]);	
	}
	
	// returns a random NamedValue containing filter in its description
	public NamedValue getRandom(String filter) {
		String[] keyArray = variants.keySet().stream().filter(w -> w.contains(filter)).toArray(String[]::new);
		// handle cases with no matches
		if (keyArray.length == 0) {
			return null;
		}
		return variants.get(keyArray[new Random().nextInt(keyArray.length)]);
	}
	
	public String getName() {
		return name;
	}

	public double getValue() {
		return value;
	}
}